Content from textarea 1:
==================================================
Repository: ninadw25/omnilearn
Files analyzed: 12

Estimated tokens: 11.2k
==================================================

Content from textarea 2:
==================================================
================================================
FILE: README.md
================================================
# OmniLearn - AI Powered Teaching Assistant

OmniLearn is an advanced AI teaching assistant platform that transforms the learning experience through intelligent document analysis and interactive learning capabilities. The platform uses state-of-the-art RAG (Retrieval Augmented Generation) technology to provide precise, context-aware responses to user queries.

## Features

### 1. Document Analysis (PDF Support)
- Upload and analyze PDF documents
- Intelligent text chunking and embedding
- Context-aware question answering
- Session-based document management
- Drag-and-drop file upload interface

### 2. Conversational AI
- Context-aware responses using RAG
- Chat history management
- Real-time message streaming
- Session-based conversations
- Intelligent question reformulation

### 3. User Interface
- Modern, responsive design
- Dark mode interface
- Intuitive chat interface
- Real-time status updates
- Session management
- API key management with secure storage

### 4. Coming Soon Features
- GitHub Repository Learning
- Web Source Integration
- Video Content Analysis
- Interactive Learning Materials

## Technology Stack

### Frontend
- **Framework**: Express.js (serving as a middle-tier server or API gateway )
- **UI**: HTML5, CSS3, JavaScript
- **Libraries**:
  - axios (HTTP client)
  - multer (file upload handling)
  - cors (Cross-Origin Resource Sharing)
  - form-data (form data handling)

### Backend
- **Framework**: FastAPI (Python)
- **AI/ML Components**:
  - LangChain
  - Groq LLM Integration
  - HuggingFace Embeddings
  - ChromaDB (Vector Store)
- **Document Processing**:
  - PyPDF (PDF processing)
  - LangChain Text Splitters
  - Vector Embeddings

### Key Dependencies
- langchain_groq
- langchain_community
- langchain_huggingface
- fastapi
- uvicorn
- python-multipart
- chromadb

## Setup and Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/OmniLearn.git
cd OmniLearn



================================================
FILE: requirements.txt
================================================
python-dotenv
langchain_groq
langchain_community
pypdf
langchain_text_splitters
langsmith
langchain_huggingface
astrapy
fastapi
langserve
langchain_core
langchain
langchain_text_splitters
langchain_community
uvicorn
python-multipart
cassio
datasets
tiktoken
langchain-astradb
langchain_chroma


================================================
FILE: selenium_final.py
================================================
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def scrape_textarea_content(url, wait_time=10):
    """
    Scrapes only the content from textarea tags after waiting for the page to load.
    
    Args:
        url (str): The URL of the webpage to scrape
        wait_time (int): Time to wait in seconds for the page to load
        
    Returns:
        list: List of strings containing text from each textarea
    """
    # Setup Chrome options for WebDriver
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Run in headless mode (no GUI)
    
    # Initialize the WebDriver
    driver = webdriver.Chrome(options=options)
    
    try:
        # Load the webpage
        driver.get(url)
        
        # Wait for specified time
        time.sleep(wait_time)
        
        # Find all textarea elements
        textareas = driver.find_elements(By.TAG_NAME, 'textarea')
        
        # Extract only the text content from textareas
        textarea_contents = [textarea.get_attribute('value') or textarea.text for textarea in textareas]
        
        return textarea_contents
        
    finally:
        # Always close the browser
        driver.quit()

# Example usage
if __name__ == "__main__":
    url = "https://gitingest.com/ninadw25/FrameFlow"  # Replace with your target URL
    try:
        textarea_texts = scrape_textarea_content(url)
        
        if textarea_texts:
            print("Textarea contents:")
            for text in textarea_texts:
                print(text)
                print("-" * 50)  # Separator between textarea contents
        else:
            print("No textarea content found.")
            
    except Exception as e:
        print(f"An error occurred: {str(e)}")


================================================
FILE: backend/main.py
================================================
from fastapi import FastAPI, UploadFile, File, HTTPException, Form
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict
import os
import tempfile
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_chroma import Chroma
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_groq import ChatGroq
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFLoader
from dotenv import load_dotenv

LANGSMITH_TRACING=True
LANGSMITH_ENDPOINT="https://api.smith.langchain.com"
LANGSMITH_API_KEY=os.getenv("LANGSMITH_API_KEY")
LANGSMITH_PROJECT=os.getenv("LANGSMITH_PROJECT")

# Load environment variables
load_dotenv()

app = FastAPI()

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Global storage for chat histories and vector stores
chat_stores = {}
vector_stores = {}      # Need to make this on cloud to deploy

# Initialize embeddings
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")

class ChatInput(BaseModel):
    session_id: str
    message: str
    groq_api_key: str

class ChatResponse(BaseModel):
    answer: str
    chat_history: List[Dict[str, str]]

@app.post("/chat", response_model=ChatResponse)
async def chat(chat_input: ChatInput):
    try:
        session_id = chat_input.session_id
       
        # Initialize LLM
        llm = ChatGroq(groq_api_key=chat_input.groq_api_key, model_name="llama-3.3-70b-versatile")
        
        if session_id not in vector_stores:
            raise HTTPException(status_code=400, detail="No documents uploaded for this session")
        
        retriever = vector_stores[session_id].as_retriever()
        
        # Set up the retriever and chains
        contextualize_q_system_prompt = (       # make changes in this
            "Given a chat history and the latest user question "
            "which might reference context in the chat history, "
            "formulate a standalone question which can be understood "
            "without the chat history. Do NOT answer the question, "
            "just reformulate it if needed and otherwise return it as is."
        )
         
        contextualize_q_prompt = ChatPromptTemplate.from_messages([
            # instructs the model to reframe the question by considering the chat history.
            # From all the context present in the history pass only the relavent context to the answer prompt
            ("system", contextualize_q_system_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ])
        
        # Pura vector store le and contextualize_q_prompt use karke usme se relavent context  
        # nikal ke ex history aware retriever bana so as it does not get confused by the current query.
        history_aware_retriever = create_history_aware_retriever(llm, retriever, contextualize_q_prompt)

        system_prompt = (
            "You are an assistant for question-answering tasks. "
            "Use the following pieces of retrieved context to answer "
            "the question. If you don't know the answer, say that you "
            "don't know. keep the answer concise and cover all the points."
            "After answering user's question create some sample questions of you own related to the question user asked"
            "\n\n{context}"
        )
        
        qa_prompt = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ])
        
        question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)
        rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)
        
        # Get or create chat history
        if session_id not in chat_stores:
            chat_stores[session_id] = ChatMessageHistory()
        
        def get_session_history(session: str):
            return chat_stores[session]
        
        conversational_rag_chain = RunnableWithMessageHistory(
            rag_chain,
            get_session_history,
            input_messages_key="input",
            history_messages_key="chat_history",
            output_messages_key="answer"
        )
        
        # Process the message
        response = conversational_rag_chain.invoke(
            {"input": chat_input.message},
            config={"configurable": {"session_id": session_id}},
        )
        
        # Format chat history for response
        history = []
        for msg in chat_stores[session_id].messages:
            history.append({
                "role": "user" if msg.type == "human" else "assistant",
                "content": msg.content
            })
        
        return ChatResponse(
            answer=response['answer'],
            chat_history=history
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/upload")
async def upload_files(
    files: List[UploadFile] = File(...),
    session_id: str = Form(...)
):
    try:
        if not files:
            raise HTTPException(status_code=400, detail="No files provided")

        documents = []
        
        for uploaded_file in files:
            # Verify file is PDF
            if not uploaded_file.filename.lower().endswith('.pdf'):
                raise HTTPException(status_code=400, detail="Only PDF files are allowed")
                
            # Create temporary file
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
                content = await uploaded_file.read()
                temp_file.write(content)
                temp_file_path = temp_file.name
            
            try:
                # Load and process the PDF
                loader = PyPDFLoader(temp_file_path)
                docs = loader.load()
                documents.extend(docs)
                
                # Clean up temp file
                os.unlink(temp_file_path)
            except Exception as e:
                # Clean up temp file
                os.unlink(temp_file_path)
                raise HTTPException(status_code=400, detail=f"Error processing PDF: {str(e)}")
        
        # Process documents
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=5000, chunk_overlap=500)
        splits = text_splitter.split_documents(documents)
        
        # Create or update vector store for session
        vector_stores[session_id] = Chroma.from_documents(documents=splits, embedding=embeddings)
        
        return {"message": "Files processed successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)


================================================
FILE: frontend/server.js
================================================
const express = require('express');
const path = require('path');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');
const cors = require('cors');

const app = express();
const port = 3000;
const FASTAPI_URL = 'http://localhost:8000';

// Middleware
app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

// Multer configuration for file uploads
const upload = multer();

// API routes
app.post('/api/chat', async (req, res) => {
    try {
        const response = await axios.post(`${FASTAPI_URL}/chat`, req.body);
        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/upload', upload.array('files'), async (req, res) => {
    try {
        const formData = new FormData();
        req.files.forEach((file) => {
            formData.append('files', file.buffer, file.originalname);
        });
        formData.append('session_id', req.body.session_id);

        const response = await axios.post(`${FASTAPI_URL}/upload`, formData, {
            headers: {
                ...formData.getHeaders(),
            },
        });
        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Serve the main landing page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Serve the document Q&A feature
app.get('/features/document-qa', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'features', 'document-qa.html'));
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});


================================================
FILE: frontend/public/app.js
================================================
// DOM Elements
const apiKeyInput = document.getElementById('apiKey');
const sessionIdInput = document.getElementById('sessionId');
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const uploadStatus = document.getElementById('uploadStatus');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');

// State
let isUploading = false;
let isSending = false;

// Helper function to add messages to the chat
function addMessage(content, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;
    messageDiv.textContent = content;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Upload files
uploadButton.addEventListener('click', async () => {
    const files = fileInput.files;
    if (files.length === 0) {
        uploadStatus.textContent = 'Please select files to upload';
        return;
    }

    const sessionId = sessionIdInput.value;
    if (!sessionId) {
        uploadStatus.textContent = 'Please enter a session ID';
        return;
    }

    isUploading = true;
    uploadButton.disabled = true;
    uploadStatus.textContent = 'Uploading files...';

    const formData = new FormData();
    for (const file of files) {
        formData.append('files', file);
    }
    formData.append('session_id', sessionId);

    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error('Upload failed');
        }

        const data = await response.json();
        uploadStatus.textContent = 'Files uploaded successfully!';
        fileInput.value = ''; // Clear file input
    } catch (error) {
        uploadStatus.textContent = `Error uploading files: ${error.message}`;
    } finally {
        isUploading = false;
        uploadButton.disabled = false;
    }
});

// Send message
async function sendMessage() {
    const message = messageInput.value.trim();
    const sessionId = sessionIdInput.value;
    const apiKey = apiKeyInput.value;

    if (!message || !sessionId || !apiKey) {
        alert('Please fill in all required fields');
        return;
    }

    if (isSending) return;

    isSending = true;
    sendButton.disabled = true;
    messageInput.disabled = true;

    // Add user message to chat
    addMessage(message, true);

    try {
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                session_id: sessionId,
                message: message,
                groq_api_key: apiKey,
            }),
        });

        if (!response.ok) {
            throw new Error('Failed to send message');
        }

        const data = await response.json();
        
        // Add assistant's response to chat
        addMessage(data.answer);

        // Clear input
        messageInput.value = '';
    } catch (error) {
        addMessage(`Error: ${error.message}`);
    } finally {
        isSending = false;
        sendButton.disabled = false;
        messageInput.disabled = false;
    }
}

// Event listeners for sending messages
sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});

// Save API key to localStorage if user opts in
apiKeyInput.addEventListener('change', () => {
    if (confirm('Would you like to save the API key for this session? (Only for development)')) {
        localStorage.setItem('groq_api_key', apiKeyInput.value);
    }
});

// Load saved API key if it exists
window.addEventListener('load', () => {
    const savedApiKey = localStorage.getItem('groq_api_key');
    if (savedApiKey) {
        apiKeyInput.value = savedApiKey;
    }
});

// File drag and drop handling
const fileUploadArea = document.querySelector('.file-upload');

fileUploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    fileUploadArea.style.borderColor = '#2563eb';
});

fileUploadArea.addEventListener('dragleave', () => {
    fileUploadArea.style.borderColor = '#e5e7eb';
});

fileUploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    fileUploadArea.style.borderColor = '#e5e7eb';
    fileInput.files = e.dataTransfer.files;
});

// Modified upload function
async function uploadFiles() {
    const files = fileInput.files;
    if (files.length === 0) {
        uploadStatus.textContent = 'Please select files to upload';
        return;
    }

    const sessionId = sessionIdInput.value;
    if (!sessionId) {
        uploadStatus.textContent = 'Please enter a session ID';
        return;
    }

    isUploading = true;
    uploadButton.disabled = true;
    uploadStatus.textContent = 'Uploading files...';

    const formData = new FormData();
    for (const file of files) {
        if (!file.name.toLowerCase().endsWith('.pdf')) {
            uploadStatus.textContent = 'Only PDF files are allowed';
            isUploading = false;
            uploadButton.disabled = false;
            return;
        }
        formData.append('files', file);
    }
    formData.append('session_id', sessionId);

    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || 'Upload failed');
        }

        const data = await response.json();
        uploadStatus.textContent = 'Files uploaded successfully!';
        fileInput.value = ''; // Clear file input
    } catch (error) {
        uploadStatus.textContent = `Error uploading files: ${error.message}`;
    } finally {
        isUploading = false;
        uploadButton.disabled = false;
    }
}

// Replace the click event listener
uploadButton.removeEventListener('click', uploadFiles);
uploadButton.addEventListener('click', uploadFiles);


================================================
FILE: frontend/public/index.html
================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OmniLearn - AI Powered Teaching Assistant</title>
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/features.css">
</head>
<body>
    <nav class="navbar">
        <div class="nav-brand">OmniLearn</div>
        <div class="nav-links">
            <a href="#features">Features</a>
            <a href="#about">About Us</a>
            <a href="#contact">Contact</a>
            <button class="demo-btn">Get a Demo</button>
        </div>
    </nav>
    <br>
    <br>
    <br>
    <header class="hero">
        <h1>AI Powered Teaching Assistant OmniLearn</h1>
        <p class="hero-subtitle">
            Transform your learning experience with our advanced AI teaching assistant. 
            From document analysis to interactive learning, we're revolutionizing how knowledge is accessed and understood.
        </p>
        <div class="cta-buttons">
            <a href="#features" class="btn primary">Explore Features</a>
            <a href="/features/document-qa.html" class="btn secondary">Try Now</a>
        </div>
    </header>
    <br>
    <br>
    <br>
    <br>
    <section id="features" class="features">
        <h2>Cutting-Edge Learning Solutions</h2>
        <p class="section-subtitle">
            Discover how OmniLearn can transform your learning journey with our innovative AI technologies.
        </p>

        <div class="feature-grid">
            <div class="feature-card">
                <div class="feature-icon">📄</div>
                <h3>Learn from Documents</h3>
                <p>Upload your PDFs and documents for intelligent analysis and interactive learning experiences.</p>
                <a href="/features/document-qa.html" class="feature-link">Try Now →</a>
            </div>

            <div class="feature-card coming-soon">
                <div class="feature-icon">💻</div>
                <h3>Learn from GitHub</h3>
                <p>Connect your repositories for comprehensive code learning and documentation analysis.</p>
                <span class="coming-soon-badge">Coming Soon</span>
            </div>

            <div class="feature-card coming-soon">
                <div class="feature-icon">🌐</div>
                <h3>Learn from Web Sources</h3>
                <p>Access and learn from curated web content with intelligent summarization.</p>
                <span class="coming-soon-badge">Coming Soon</span>
            </div>

            <div class="feature-card coming-soon">
                <div class="feature-icon">🎥</div>
                <h3>Learn from Video</h3>
                <p>Transform video content into interactive learning materials with AI-powered analysis.</p>
                <span class="coming-soon-badge">Coming Soon</span>
            </div>
        </div>
    </section>
</body>
</html>


================================================
FILE: frontend/public/features/document-qa.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversational RAG Chatbot</title>
    <link rel="stylesheet" href="../styles/document-qa.css">
    <!-- Add marked library -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    <!-- Add other language components as needed -->
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Conversational RAG Chatbot</h1>
            <p>Upload PDFs and chat with their content</p>
        </div>

        <div class="setup-section">
            <div class="input-group">
                <label for="apiKey">Groq API Key:</label>
                <input type="password" id="apiKey" placeholder="Enter your Groq API key">
            </div>

            <div class="input-group">
                <label for="sessionId">Session ID:</label>
                <input type="text" id="sessionId" value="default_session">
            </div>

            <div class="file-upload">
                <input type="file" id="fileInput" multiple accept=".pdf">
                <p>Drag and drop PDF files here or click to select</p>
                <button id="uploadButton">Upload Files</button>
                <div id="uploadStatus"></div>
            </div>
        </div>

        <div class="chat-container">
            <div class="chat-messages" id="chatMessages"></div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button id="sendButton">Send</button>
            </div>
        </div>
    </div>

    <script src="/js/main.js"></script>
</body>
</html>


================================================
FILE: frontend/public/js/main.js
================================================
// DOM Elements
const apiKeyInput = document.getElementById('apiKey');
const sessionIdInput = document.getElementById('sessionId');
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const uploadStatus = document.getElementById('uploadStatus');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');

// State
let isUploading = false;
let isSending = false;

// Helper function to add messages to the chat
function addMessage(content, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;
    
    // Parse markdown only for assistant messages
    if (isUser) {
        messageDiv.textContent = content;
    } else {
        // Set innerHTML with parsed markdown
        messageDiv.innerHTML = marked.parse(content, {
            breaks: true,
            gfm: true,
            sanitize: true
        });

        // Apply syntax highlighting to code blocks
        messageDiv.querySelectorAll('pre code').forEach((block) => {
            Prism.highlightElement(block);
        });
    }
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    // Handle code blocks syntax highlighting if needed
    if (!isUser && messageDiv.querySelectorAll('pre code').length > 0) {
        // Optional: Add syntax highlighting using libraries like Prism.js or highlight.js
    }
}

// Upload files
uploadButton.addEventListener('click', async () => {
    const files = fileInput.files;
    if (files.length === 0) {
        uploadStatus.textContent = 'Please select files to upload';
        return;
    }

    const sessionId = sessionIdInput.value;
    if (!sessionId) {
        uploadStatus.textContent = 'Please enter a session ID';
        return;
    }

    isUploading = true;
    uploadButton.disabled = true;
    uploadStatus.textContent = 'Uploading files...';

    const formData = new FormData();
    for (const file of files) {
        formData.append('files', file);
    }
    formData.append('session_id', sessionId);

    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error('Upload failed');
        }

        const data = await response.json();
        uploadStatus.textContent = 'Files uploaded successfully!';
        fileInput.value = ''; // Clear file input
    } catch (error) {
        uploadStatus.textContent = `Error uploading files: ${error.message}`;
    } finally {
        isUploading = false;
        uploadButton.disabled = false;
    }
});

// Send message
async function sendMessage() {
    const message = messageInput.value.trim();
    const sessionId = sessionIdInput.value;
    const apiKey = apiKeyInput.value;

    if (!message || !sessionId || !apiKey) {
        alert('Please fill in all required fields');
        return;
    }

    if (isSending) return;

    isSending = true;
    sendButton.disabled = true;
    messageInput.disabled = true;

    // Add user message to chat
    addMessage(message, true);

    try {
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                session_id: sessionId,
                message: message,
                groq_api_key: apiKey,
            }),
        });

        if (!response.ok) {
            throw new Error('Failed to send message');
        }

        const data = await response.json();
        
        // Add assistant's response to chat
        addMessage(data.answer);

        // Clear input
        messageInput.value = '';
    } catch (error) {
        addMessage(`Error: ${error.message}`);
    } finally {
        isSending = false;
        sendButton.disabled = false;
        messageInput.disabled = false;
    }
}

// Event listeners for sending messages
sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});

// Save API key to localStorage if user opts in
apiKeyInput.addEventListener('change', () => {
    if (confirm('Would you like to save the API key for this session? (Only for development)')) {
        localStorage.setItem('groq_api_key', apiKeyInput.value);
    }
});

// Load saved API key if it exists
window.addEventListener('load', () => {
    const savedApiKey = localStorage.getItem('groq_api_key');
    if (savedApiKey) {
        apiKeyInput.value = savedApiKey;
    }
});

// File drag and drop handling
const fileUploadArea = document.querySelector('.file-upload');

fileUploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    fileUploadArea.style.borderColor = '#2563eb';
});

fileUploadArea.addEventListener('dragleave', () => {
    fileUploadArea.style.borderColor = '#e5e7eb';
});

fileUploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    fileUploadArea.style.borderColor = '#e5e7eb';
    fileInput.files = e.dataTransfer.files;
});

// Modified upload function
async function uploadFiles() {
    const files = fileInput.files;
    if (files.length === 0) {
        uploadStatus.textContent = 'Please select files to upload';
        return;
    }

    const sessionId = sessionIdInput.value;
    if (!sessionId) {
        uploadStatus.textContent = 'Please enter a session ID';
        return;
    }

    isUploading = true;
    uploadButton.disabled = true;
    uploadStatus.textContent = 'Uploading files...';

    const formData = new FormData();
    for (const file of files) {
        if (!file.name.toLowerCase().endsWith('.pdf')) {
            uploadStatus.textContent = 'Only PDF files are allowed';
            isUploading = false;
            uploadButton.disabled = false;
            return;
        }
        formData.append('files', file);
    }
    formData.append('session_id', sessionId);

    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || 'Upload failed');
        }

        const data = await response.json();
        uploadStatus.textContent = 'Files uploaded successfully!';
        fileInput.value = ''; // Clear file input
    } catch (error) {
        uploadStatus.textContent = `Error uploading files: ${error.message}`;
    } finally {
        isUploading = false;
        uploadButton.disabled = false;
    }
}

// Replace the click event listener
uploadButton.removeEventListener('click', uploadFiles);
uploadButton.addEventListener('click', uploadFiles);


================================================
FILE: frontend/public/styles/document-qa.css
================================================
:root {
    --primary-gradient: linear-gradient(135deg, #3b82f6, #1d4ed8);
    --surface-gradient: linear-gradient(135deg, #0f172a, #1e293b);
    --text-gradient: linear-gradient(135deg, #60a5fa, #3b82f6);
    --primary: #3b82f6;
    --primary-dark: #1d4ed8;
    --surface: #1e293b;
    --surface-dark: #0f172a;
    --text: #f8fafc;
    --text-muted: #94a3b8;
    --border: #334155;
}

body {
    font-family: system-ui, -apple-system, sans-serif;
    margin: 0;
    padding: 0;
    background: var(--surface-gradient);
    color: var(--text);
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.header {
    text-align: center;
    margin-bottom: 2rem;
}

.header h1 {
    background: var(--text-gradient);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
}

.header p {
    color: var(--text-muted);
    font-size: 1.25rem;
}

.setup-section {
    background: rgba(30, 41, 59, 0.5);
    padding: 1.5rem;
    border-radius: 1rem;
    border: 1px solid var(--border);
    margin-bottom: 2rem;
    backdrop-filter: blur(12px);
}

.input-group {
    margin-bottom: 1.5rem;
}

.input-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text);
}

.input-group input {
    width: 100%;
    padding: 0.75rem;
    background: rgba(15, 23, 42, 0.6);
    border: 1px solid var(--border);
    border-radius: 0.5rem;
    font-size: 1rem;
    color: var(--text);
    transition: all 0.2s ease;
}

.input-group input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.chat-container {
    background: rgba(30, 41, 59, 0.5);
    border-radius: 1rem;
    border: 1px solid var(--border);
    height: 600px;
    display: flex;
    flex-direction: column;
    backdrop-filter: blur(12px);
}

.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1.5rem;
}

.message {
    margin-bottom: 1rem;
    padding: 1rem;
    border-radius: 0.75rem;
    max-width: 80%;
    animation: fadeIn 0.3s ease-out forwards;
}

.message.user {
    background: var(--primary-gradient);
    color: var(--text);
    margin-left: auto;
}

.message.assistant {
    background: rgba(15, 23, 42, 0.6);
    color: var(--text);
    margin-right: auto;
    line-height: 1.6;
}

.chat-input {
    padding: 1rem;
    border-top: 1px solid var(--border);
    display: flex;
    gap: 1rem;
}

.chat-input input {
    flex-grow: 1;
    padding: 0.75rem;
    background: rgba(15, 23, 42, 0.6);
    border: 1px solid var(--border);
    border-radius: 0.5rem;
    font-size: 1rem;
    color: var(--text);
    transition: all 0.2s ease;
}

.chat-input input:focus {
    outline: none;
    border-color: var(--primary);
}

button {
    background: var(--primary-gradient);
    color: var(--text);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.2s ease;
}

button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
}

button:disabled {
    background: var(--text-muted);
    cursor: not-allowed;
    transform: none;
}

.file-upload {
    border: 2px dashed var(--border);
    padding: 2rem;
    text-align: center;
    border-radius: 0.75rem;
    margin-bottom: 1.5rem;
    transition: all 0.2s ease;
}

.file-upload:hover {
    border-color: var(--primary);
}

#uploadStatus {
    margin-top: 0.75rem;
    font-size: 0.875rem;
    color: var(--text-muted);
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(15, 23, 42, 0.6);
}

::-webkit-scrollbar-thumb {
    background: var(--border);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--primary);
}

/* Markdown styles */
.message.assistant h1,
.message.assistant h2,
.message.assistant h3,
.message.assistant h4 {
    margin: 1rem 0;
    color: var(--text);
}

.message.assistant p {
    margin: 0.5rem 0;
}

.message.assistant code {
    background: rgba(15, 23, 42, 0.6);
    padding: 0.2em 0.4em;
    border-radius: 0.3rem;
    font-family: monospace;
}

.message.assistant pre {
    background: rgba(15, 23, 42, 0.6);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
}

.message.assistant pre code {
    background: transparent;
    padding: 0;
}

.message.assistant ul,
.message.assistant ol {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
}

.message.assistant blockquote {
    border-left: 4px solid var(--primary);
    margin: 1rem 0;
    padding-left: 1rem;
    color: var(--text-muted);
}


================================================
FILE: frontend/public/styles/features.css
================================================
.features {
    padding: 4rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.features h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.section-subtitle {
    text-align: center;
    color: var(--text-muted);
    margin-bottom: 3rem;
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    padding: 1rem;
}

.feature-card {
    background: rgba(30, 41, 59, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 1rem;
    transition: all 0.3s;
    position: relative;
}

.feature-card:hover {
    transform: translateY(-5px);
    background: rgba(30, 41, 59, 0.8);
}

.feature-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.feature-card h3 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: var(--text-light);
}

.feature-card p {
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.feature-link {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
}

.coming-soon {
    opacity: 0.7;
    pointer-events: none;
}

.coming-soon-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(37, 99, 235, 0.2);
    color: #60a5fa;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
}

@media (max-width: 768px) {
    .hero h1 {
        font-size: 2.5rem;
    }
    
    .nav-links {
        display: none;
    }
    
    .feature-grid {
        grid-template-columns: 1fr;
    }
}


================================================
FILE: frontend/public/styles/main.css
================================================
/* Modern CSS Reset and Variables */
:root {
    --primary-gradient: linear-gradient(135deg, #3b82f6, #1d4ed8);
    --surface-gradient: linear-gradient(135deg, #0f172a, #1e293b);
    --text-gradient: linear-gradient(135deg, #60a5fa, #3b82f6);
    --primary: #3b82f6;
    --primary-dark: #1d4ed8;
    --surface: #1e293b;
    --surface-dark: #0f172a;
    --text: #f8fafc;
    --text-muted: #94a3b8;
    --border: #334155;
  }
  
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: var(--surface-gradient);
    color: var(--text);
    line-height: 1.6;
    min-height: 100vh;
  }
  
  /* Enhanced Navbar */
  .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(15, 23, 42, 0.9);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid var(--border);
    z-index: 1000;
  }
  
  .nav-brand {
    font-size: 1.75rem;
    font-weight: 700;
    background: var(--text-gradient);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    letter-spacing: -0.5px;
  }
  
  .nav-links {
    display: flex;
    gap: 2.5rem;
    align-items: center;
  }
  
  .nav-links a {
    color: var(--text-muted);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
  }
  
  .nav-links a:hover {
    color: var(--text);
  }
  
  .demo-btn {
    background: var(--primary);
    color: var(--text);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .demo-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }
  
  /* Enhanced Hero Section */
  .hero {
    padding: 10rem 2rem 6rem;
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .hero h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    line-height: 1.2;
    margin-bottom: 1.5rem;
    background: var(--text-gradient);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 800;
  }
  
  .hero-subtitle {
    font-size: clamp(1.125rem, 2vw, 1.25rem);
    color: var(--text-muted);
    max-width: 800px;
    margin: 0 auto 3rem;
  }
  
  .cta-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .btn {
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s ease;
    font-size: 1.125rem;
  }
  
  .btn.primary {
    background: var(--primary-gradient);
    color: var(--text);
    border: none;
  }
  
  .btn.secondary {
    background: transparent;
    color: var(--text);
    border: 1px solid var(--border);
  }
  
  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
  }
  
  .btn.secondary:hover {
    border-color: var(--primary);
  }
  
  /* Enhanced Features Section */
  .feature-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* 2x2 grid */
    gap: 2rem;
    padding: 1rem;
    justify-content: center;
  }
  
  .feature-card {
    background: rgba(30, 41, 59, 0.5);
    border: 1px solid var(--border);
    border-radius: 1rem;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    min-height: 200px; /* Making it slightly rectangular */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .features h2 {
    font-size: clamp(2rem, 4vw, 3rem);
    text-align: center;
    margin-bottom: 1rem;
    background: var(--text-gradient);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 700;
  }
  
  .section-subtitle {
    text-align: center;
    color: var(--text-muted);
    font-size: 1.25rem;
    max-width: 800px;
    margin: 0 auto 4rem;
  }
  
  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    padding: 1rem;
  }
  
  .feature-card {
    background: rgba(30, 41, 59, 0.5);
    border: 1px solid var(--border);
    border-radius: 1rem;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  
  .feature-card:hover {
    border-color: var(--primary);
    transform: translateY(-4px);
  }
  
  .feature-icon {
    width: 3rem;
    height: 3rem;
    background: rgba(59, 130, 246, 0.1);
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .feature-card h3 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: var(--text);
    font-weight: 600;
  }
  
  .feature-card p {
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }
  
  .feature-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    transition: color 0.2s ease;
  }
  
  .feature-link:hover {
    color: var(--text);
  }
  
  .coming-soon-badge {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: rgba(30, 41, 59, 0.8);
    color: var(--text-muted);
    border-radius: 2rem;
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .navbar {
      padding: 1rem;
    }
  
    .nav-links {
      gap: 1.5rem;
    }
  
    .feature-grid {
      grid-template-columns: 1fr; /* Single column on small screens */
    }

    .hero {
      padding: 8rem 1rem 4rem;
    }
  
    .feature-grid {
      grid-template-columns: 1fr;
    }
  
    .cta-buttons {
      flex-direction: column;
      gap: 1rem;
    }
  
    .btn {
      width: 100%;
      text-align: center;
    }
  }
  
  /* Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .hero h1,
  .hero-subtitle,
  .cta-buttons,
  .feature-card {
    animation: fadeIn 0.8s ease-out forwards;
  }


==================================================

